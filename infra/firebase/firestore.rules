rules_version = '2';

/**
 * Firestore Security Rules for PSLE AI Tutor
 * Production-ready multi-tenant security with role-based access
 */

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============ HELPER FUNCTIONS ============
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             request.auth.token.get('role', '') == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && 
             request.auth.token.get('role', '') in roles;
    }
    
    function isOwner() {
      return isAuthenticated() && 
             resource != null && 
             resource.data.get('user_id', '') == getUserId();
    }
    
    function isParentOfLearner(learnerId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/learners/$(learnerId)) &&
             get(/databases/$(database)/documents/learners/$(learnerId)).data.parent_id == getUserId();
    }
    
    function isTeacherOfLearner(learnerId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/learners/$(learnerId)) &&
             getUserId() in get(/databases/$(database)/documents/learners/$(learnerId)).data.teacher_ids;
    }
    
    function canAccessLearner(learnerId) {
      return isParentOfLearner(learnerId) || 
             isTeacherOfLearner(learnerId) || 
             hasRole('admin');
    }
    
    // ============ USER MANAGEMENT ============
    
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isAuthenticated() && userId == getUserId();
      
      // Admins can read all user profiles
      allow read: if hasRole('admin');
      
      // Only authenticated users can create their own profile
      allow create: if isAuthenticated() && 
                       userId == getUserId() &&
                       request.resource.data.user_id == getUserId();
    }
    
    // ============ LEARNER PROFILES ============
    
    match /learners/{learnerId} {
      // Parents can read/write their children's profiles
      allow read, write: if isParentOfLearner(learnerId);
      
      // Teachers can read their students' profiles
      allow read: if isTeacherOfLearner(learnerId);
      
      // Teachers can update limited fields (progress, notes)
      allow update: if isTeacherOfLearner(learnerId) && 
                       onlyUpdatingFields(['performance_stats', 'learning_insights']);
      
      // Admins have full access
      allow read, write: if hasRole('admin');
      
      // API service can update progress (using service account)
      allow update: if request.auth.token.get('role', '') == 'service' &&
                       onlyUpdatingFields(['xp', 'level', 'completed_items', 'mastery_scores', 
                                         'current_session_id', 'total_sessions', 'total_time_spent',
                                         'performance_stats', 'misconceptions', 'learning_insights']);
    }
    
    // ============ TUTORING SESSIONS ============
    
    match /sessions/{sessionId} {
      // Users can access sessions for their learners
      allow read: if canAccessLearner(resource.data.learner_id);
      
      // Only API service can create/update sessions
      allow create, update: if request.auth.token.get('role', '') == 'service';
      
      // Admins have full access
      allow read, write: if hasRole('admin');
    }
    
    // ============ CURRICULUM CONTENT ============
    
    match /curriculum/{subject}/items/{itemId} {
      // All authenticated users can read curriculum
      allow read: if isAuthenticated();
      
      // Only admins and content creators can write curriculum
      allow write: if hasAnyRole(['admin', 'author']);
      
      // API service can update usage statistics
      allow update: if request.auth.token.get('role', '') == 'service' &&
                       onlyUpdatingFields(['usage_stats']);
    }
    
    // Match all curriculum subcollections
    match /curriculum/{subject=**} {
      allow read: if isAuthenticated();
      allow write: if hasAnyRole(['admin', 'author']);
    }
    
    // ============ SYSTEM COLLECTIONS ============
    
    match /_health_check/{document=**} {
      // Allow health checks for monitoring
      allow read, write: if true;
    }
    
    // ============ HELPER FUNCTIONS FOR FIELD VALIDATION ============
    
    function onlyUpdatingFields(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(allowedFields);
    }
    
    // ============ DEFAULT DENY ============
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

